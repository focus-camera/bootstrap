@use "sass:map";
@use "mixins";
@use "mixins/border-radius";
@use "variables";

// scss-lint:disable PropertyCount

// Embedded icons from Open Iconic.
// Released under MIT and copyright 2014 Waybury.
// https://useiconic.com/open


// Checkboxes and radios
//
// Base class takes care of all the key behavioral aspects.

.custom-control {
  position: relative;
  display: inline-flex;
  min-height: (1rem * variables.$line-height-base);
  padding-left: variables.$custom-control-gutter;
  margin-right: variables.$custom-control-spacer-x;
  cursor: pointer;
}

.custom-control-input {
  position: absolute;
  z-index: -1; // Put the input behind the label so it doesn't overlay text
  opacity: 0;

  &:checked ~ .custom-control-indicator {
    color: variables.$custom-control-checked-indicator-color;
    background-color: variables.$custom-control-checked-indicator-bg;
    @include mixins.box-shadow(variables.$custom-control-checked-indicator-box-shadow);
  }

  &:focus ~ .custom-control-indicator {
    // the mixin is not used here to make sure there is feedback
    box-shadow: variables.$custom-control-focus-indicator-box-shadow;
  }

  &:active ~ .custom-control-indicator {
    color: variables.$custom-control-active-indicator-color;
    background-color: variables.$custom-control-active-indicator-bg;
    @include mixins.box-shadow(variables.$custom-control-active-indicator-box-shadow);
  }

  &:disabled {
    ~ .custom-control-indicator {
      cursor: variables.$custom-control-disabled-cursor;
      background-color: variables.$custom-control-disabled-indicator-bg;
    }

    ~ .custom-control-description {
      color: variables.$custom-control-disabled-description-color;
      cursor: variables.$custom-control-disabled-cursor;
    }
  }
}

// Custom indicator
//
// Generates a shadow element to create our makeshift checkbox/radio background.

.custom-control-indicator {
  position: absolute;
  top: ((variables.$line-height-base - variables.$custom-control-indicator-size) * 0.5);
  left: 0;
  display: block;
  width: variables.$custom-control-indicator-size;
  height: variables.$custom-control-indicator-size;
  pointer-events: none;
  user-select: none;
  background-color: variables.$custom-control-indicator-bg;
  background-repeat: no-repeat;
  background-position: center center;
  background-size: variables.$custom-control-indicator-bg-size;
  @include mixins.box-shadow(variables.$custom-control-indicator-box-shadow);
}

// Checkboxes
//
// Tweak just a few things for checkboxes.

.custom-checkbox {
  .custom-control-indicator {
    @include border-radius.border-radius(variables.$custom-checkbox-radius);
  }

  .custom-control-input:checked ~ .custom-control-indicator {
    background-image: variables.$custom-checkbox-checked-icon;
  }

  .custom-control-input:indeterminate ~ .custom-control-indicator {
    background-color: variables.$custom-checkbox-indeterminate-bg;
    background-image: variables.$custom-checkbox-indeterminate-icon;
    @include mixins.box-shadow(variables.$custom-checkbox-indeterminate-box-shadow);
  }
}

// Radios
//
// Tweak just a few things for radios.

.custom-radio {
  .custom-control-indicator {
    border-radius: variables.$custom-radio-radius;
  }

  .custom-control-input:checked ~ .custom-control-indicator {
    background-image: variables.$custom-radio-checked-icon;
  }
}


// Layout options
//
// By default radios and checkboxes are `inline-block` with no additional spacing
// set. Use these optional classes to tweak the layout.

.custom-controls-stacked {
  display: flex;
  flex-direction: column;

  .custom-control {
    margin-bottom: variables.$custom-control-spacer-y;

    + .custom-control {
      margin-left: 0;
    }
  }
}


// Select
//
// Replaces the browser default select with a custom one, mostly pulled from
// http://primercss.io.
//

.custom-select {
  display: inline-block;
  max-width: 100%;
  $select-border-width: (variables.$border-width * 2);
  height: calc(#{variables.$input-height} + #{$select-border-width});
  padding: variables.$custom-select-padding-y (variables.$custom-select-padding-x + variables.$custom-select-indicator-padding) variables.$custom-select-padding-y variables.$custom-select-padding-x;
  line-height: variables.$custom-select-line-height;
  color: variables.$custom-select-color;
  vertical-align: middle;
  background: variables.$custom-select-bg variables.$custom-select-indicator no-repeat right variables.$custom-select-padding-x center;
  background-size: variables.$custom-select-bg-size;
  border: variables.$custom-select-border-width solid variables.$custom-select-border-color;
  @include border-radius.border-radius(variables.$custom-select-border-radius);
  // Use vendor prefixes as `appearance` isn't part of the CSS spec.
  -moz-appearance: none;
  -webkit-appearance: none;

  &:focus {
    border-color: variables.$custom-select-focus-border-color;
    outline: none;
    @include mixins.box-shadow(variables.$custom-select-focus-box-shadow);

    &::-ms-value {
      // For visual consistency with other platforms/browsers,
      // supress the default white text on blue background highlight given to
      // the selected option text when the (still closed) <select> receives focus
      // in IE and (under certain conditions) Edge.
      // See https://github.com/twbs/bootstrap/issues/19398.
      color: variables.$input-color;
      background-color: variables.$input-bg;
    }
  }

  &:disabled {
    color: variables.$custom-select-disabled-color;
    cursor: variables.$cursor-disabled;
    background-color: variables.$custom-select-disabled-bg;
  }

  // Hides the default caret in IE11
  &::-ms-expand {
    opacity: 0;
  }
}

.custom-select-sm {
  padding-top: variables.$custom-select-padding-y;
  padding-bottom: variables.$custom-select-padding-y;
  font-size: variables.$custom-select-sm-font-size;

  // &:not([multiple]) {
  //   height: 26px;
  //   min-height: 26px;
  // }
}


// File
//
// Custom file input.

.custom-file {
  position: relative;
  display: inline-block;
  max-width: 100%;
  height: variables.$custom-file-height;
  margin-bottom: 0;
  cursor: pointer;
}

.custom-file-input {
  min-width: variables.$custom-file-width;
  max-width: 100%;
  height: variables.$custom-file-height;
  margin: 0;
  filter: alpha(opacity = 0);
  opacity: 0;

  &:focus ~ .custom-file-control {
    @include mixins.box-shadow(variables.$custom-file-focus-box-shadow);
  }
}

.custom-file-control {
  position: absolute;
  top: 0;
  right: 0;
  left: 0;
  z-index: 5;
  height: variables.$custom-file-height;
  padding: variables.$custom-file-padding-x variables.$custom-file-padding-y;
  line-height: variables.$custom-file-line-height;
  color: variables.$custom-file-color;
  pointer-events: none;
  user-select: none;
  background-color: variables.$custom-file-bg;
  border: variables.$custom-file-border-width solid variables.$custom-file-border-color;
  @include border-radius.border-radius(variables.$custom-file-border-radius);
  @include mixins.box-shadow(variables.$custom-file-box-shadow);

  @each $lang, $text in map.get(variables.$custom-file-text, placeholder) {
    &:lang(#{$lang})::after {
      content: $text;
    }
  }

  &::before {
    position: absolute;
    top: -(variables.$custom-file-border-width);
    right: -(variables.$custom-file-border-width);
    bottom: -(variables.$custom-file-border-width);
    z-index: 6;
    display: block;
    height: variables.$custom-file-height;
    padding: variables.$custom-file-padding-x variables.$custom-file-padding-y;
    line-height: variables.$custom-file-line-height;
    color: variables.$custom-file-button-color;
    background-color: variables.$custom-file-button-bg;
    border: variables.$custom-file-border-width solid variables.$custom-file-border-color;
    @include border-radius.border-radius(0 variables.$custom-file-border-radius variables.$custom-file-border-radius 0);
  }

  @each $lang, $text in map.get(variables.$custom-file-text, button-label) {
    &:lang(#{$lang})::before {
      content: $text;
    }
  }
}
